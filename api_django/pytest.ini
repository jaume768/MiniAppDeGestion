[tool:pytest]
DJANGO_SETTINGS_MODULE = gestion_empresa.settings_test
python_files = tests.py test_*.py *_tests.py
python_classes = Test*
python_functions = test_*
testpaths = .
addopts = 
    --tb=short
    --strict-markers
    --disable-warnings
    --create-db
    -v
    --cov=.
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=80
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*USE_L10N.*:django.utils.deprecation.RemovedInDjango40Warning
    ignore:.*DEFAULT_AUTO_FIELD.*:django.core.management.base.CommandError

markers =
    unit: Tests unitarios para modelos individuales
    integration: Tests de integraci칩n entre componentes
    api: Tests de API REST y endpoints
    performance: Tests de rendimiento y optimizaci칩n
    security: Tests de seguridad y multi-tenancy
    slow: Tests que tardan m치s tiempo en ejecutar
    
# Configuraci칩n de cobertura
[coverage:run]
source = .
omit = 
    venv/*
    */venv/*
    */migrations/*
    manage.py
    */settings/*
    */settings.py
    */settings_*.py
    */wsgi.py
    */asgi.py
    */tests/*
    */test_*.py
    */__pycache__/*
    .git/*
    */static/*
    */media/*
    htmlcov/*
    .pytest_cache/*
    */node_modules/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod
